import {generateIncrementedName} from "server/src/utils/generateIncrementedName";
import {Aspect} from "../Aspect";
import BasePlugin from "..";
import {ShipSystemTypes, ShipSystemFlags} from "./shipSystemTypes";
import {Kelvin, KelvinPerSecond} from "@server/utils/unitTypes";

/**
 * The base class to use when creating system plugins
 *
 * Eventually this will include generic properties for power, heat, and efficiency
 */
export default class BaseShipSystemPlugin extends Aspect {
  static flags: ShipSystemFlags[] = ["efficiency", "heat", "power"];
  apiVersion = "shipSystems/v1" as const;
  kind = "shipSystems" as const;
  name: string;
  description: string;
  type: keyof typeof ShipSystemTypes;
  tags: string[];
  /**
   * Extend the sub-class to include the specific images and sound effects
   * for this system
   */
  assets: {};
  allowMultiple: boolean = false;

  /**
   * The rate at which heat can transfer in or out.
   * Heat generated by this entity isn't bound by this number
   */
  coolantHeatTransferRate: KelvinPerSecond = 10;

  /**
   * The effectiveness of transferring heat into space. A multiplier
   * for the equation P = A * a * T5
   */
  heatDissipationRate: number = 1;

  /**
   * The standard heat level. When plotted, this
   * represents the very bottom of the heat bar.
   */
  nominalHeat: Kelvin = 295.37;

  /**
   * The temperature at which this system starts experiencing
   * efficiency decreases due to overheating.
   */
  maxSafeHeat: Kelvin = 1000;

  /**
   * The maximum possible temperature. Represents the very top
   * of the heat bar graph.
   */
  maxHeat: Kelvin = 2500;

  constructor(params: Partial<BaseShipSystemPlugin>, plugin: BasePlugin) {
    const name = generateIncrementedName(
      params.name || `New ${params.type}`,
      plugin.aspects.shipSystems.map(sys => sys.name)
    );
    super({name, ...params}, {kind: "shipSystems"}, plugin);
    this.name = name || "";
    this.type = params.type || "generic";
    this.description = params.description || "";
    this.tags = params.tags || [];
    this.assets = params.assets || {
      soundEffects: [],
    };
    this.coolantHeatTransferRate = params.coolantHeatTransferRate || 10;
    this.nominalHeat = params.nominalHeat || 295.37;
    this.maxSafeHeat = params.maxSafeHeat || 1000;
    this.maxHeat = params.maxHeat || 2500;
  }
}
